generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model tbl_level {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  level      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model artikel_kategoris {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  slug       String    @unique(map: "artikel_kategoris_slug_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model artikels {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  author_id           BigInt    @db.UnsignedBigInt
  artikel_kategori_id BigInt    @db.UnsignedBigInt
  title               String    @db.VarChar(255)
  slug                String    @unique(map: "artikels_slug_unique") @db.VarChar(255)
  thumbnail           String    @db.VarChar(255)
  content             String    @db.LongText
  is_featured         Boolean   @default(false)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
}

model authors {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  username   String    @unique(map: "authors_username_unique") @db.VarChar(255)
  avatar     String    @db.VarChar(255)
  bio        String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model banners {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  artikel_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model katalogs {
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  sub_sektor_id BigInt      @db.UnsignedBigInt
  title         String      @db.VarChar(255)
  slug          String      @unique(map: "katalogs_slug_unique") @db.VarChar(255)
  produk        String      @db.VarChar(255)
  harga         Decimal     @db.Decimal(12, 2)
  content       String      @db.LongText
  no_hp         String?     @db.VarChar(255)
  instagram     String?     @db.VarChar(255)
  shopee        String?     @db.VarChar(255)
  tokopedia     String?     @db.VarChar(255)
  lazada        String?     @db.VarChar(255)
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  sub_sektors   sub_sektors @relation(fields: [sub_sektor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "katalogs_sub_sektor_id_foreign")

  @@index([sub_sektor_id], map: "katalogs_sub_sektor_id_foreign")
}

model sub_sektors {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  title      String     @db.VarChar(255)
  slug       String     @unique(map: "sub_sektors_slug_unique") @db.VarChar(255)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  katalogs   katalogs[]
}
