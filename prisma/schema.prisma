generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                        BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                      String                 @db.VarChar(255)
  email                     String                 @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at         DateTime?              @db.Timestamp(0)
  password                  String                 @db.VarChar(255)
  two_factor_secret         String?                @db.VarChar(255)
  two_factor_recovery_codes String?                @db.Text
  two_factor_confirmed_at   DateTime?              @db.Timestamp(0)
  two_factor_enabled        Boolean                @default(false)
  remember_token            String?                @db.VarChar(100)
  created_at                DateTime?              @db.Timestamp(0)
  updated_at                DateTime?              @db.Timestamp(0)
  username                  String?                @unique(map: "users_username_unique") @db.VarChar(45)
  gender                    users_gender?
  phone_number              String?                @db.VarChar(20)
  image                     String?                @db.VarChar(255)
  business_name             String?                @db.VarChar(100)
  business_status           users_business_status?
  level_id                  BigInt                 @default(3) @db.UnsignedBigInt
  business_category_id      Int?                   @db.UnsignedInt
  resetPasswordToken        String?                @unique(map: "users_resetpasswordtoken_unique") @db.VarChar(255)
  resetPasswordTokenExpiry  DateTime?              @db.DateTime(0)
  verifiedAt                DateTime?              @db.Timestamp(0)
  artikels                  artikels[]
  products                  products[]
  business_categories       business_categories?   @relation(fields: [business_category_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_business_category_id_foreign")
  levels                    levels                 @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "users_level_id_foreign")

  @@index([business_category_id], map: "users_business_category_id_foreign")
  @@index([level_id], map: "users_level_id_foreign")
}

model artikel_kategoris {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String    @db.VarChar(255)
  slug        String    @unique(map: "artikel_kategoris_slug_unique") @db.VarChar(255)
  icon        String?   @db.VarChar(255)
  description String?   @db.Text
  color       String?   @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model artikels {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  author_id           BigInt    @db.UnsignedBigInt
  artikel_kategori_id BigInt    @db.UnsignedBigInt
  title               String    @db.VarChar(255)
  slug                String    @unique(map: "artikels_slug_unique") @db.VarChar(255)
  thumbnail           String    @db.VarChar(255)
  content             String    @db.LongText
  is_featured         Boolean   @default(false)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  users               users     @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artikels_author_id_foreign")

  @@index([author_id], map: "artikels_author_id_foreign")
}

model authors {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  username   String    @unique(map: "authors_username_unique") @db.VarChar(255)
  avatar     String    @db.VarChar(255)
  bio        String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model banners {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String?   @db.VarChar(255)
  image      String?   @db.VarChar(255)
  artikel_id BigInt    @db.UnsignedBigInt
  link_url   String?   @db.VarChar(255)
  is_active  Boolean   @default(true)
  sort_order Int       @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model business_categories {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @unique(map: "tbl_kategori_usaha_nama_kategori_unique") @db.VarChar(50)
  image           String?           @db.VarChar(255)
  products        products[]
  temporary_users temporary_users[]
  users           users[]
}

model catalogs {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  sub_sector_id   BigInt            @db.UnsignedBigInt
  title           String            @db.VarChar(255)
  slug            String            @unique(map: "katalogs_slug_unique") @db.VarChar(255)
  image           String?           @db.VarChar(255)
  product_name    String            @db.VarChar(255)
  price           Decimal           @db.Decimal(12, 2)
  content         String            @db.LongText
  contact         String?           @db.VarChar(255)
  phone_number    String?           @db.VarChar(255)
  email           String?           @db.VarChar(255)
  instagram       String?           @db.VarChar(255)
  shopee          String?           @db.VarChar(255)
  tokopedia       String?           @db.VarChar(255)
  lazada          String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  catalog_product catalog_product[]
  sub_sectors     sub_sectors       @relation(fields: [sub_sector_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "katalogs_sub_sektor_id_foreign")

  @@index([sub_sector_id], map: "catalogs_sub_sector_id_foreign")
}

model levels {
  id              BigInt            @id @db.UnsignedBigInt
  name            String            @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  temporary_users temporary_users[]
  users           users[]
}

model online_store_links {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id    Int      @db.UnsignedInt
  platform_name String?  @db.VarChar(50)
  url           String   @db.Text
  products      products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tbl_olshop_link_id_produk_foreign")

  @@index([product_id], map: "tbl_olshop_link_id_produk_index")
}

model products {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  status_produk        products_status_produk @default(pending)
  owner_name           String?                @db.VarChar(35)
  name                 String                 @db.VarChar(50)
  description          String                 @db.VarChar(500)
  price                Float
  stock                Int
  image                String                 @db.VarChar(255)
  phone_number         String                 @db.VarChar(12)
  uploaded_at          DateTime               @default(now()) @db.Timestamp(0)
  user_id              BigInt?                @db.UnsignedBigInt
  business_category_id Int?                   @db.UnsignedInt
  status               products_status        @default(pending)
  online_store_links   online_store_links[]
  business_categories  business_categories?   @relation(fields: [business_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_business_category_id_foreign")
  users                users?                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "tbl_product_id_user_foreign")

  @@index([user_id], map: "tbl_product_id_user_index")
  @@index([business_category_id], map: "products_business_category_id_foreign")
}

model sub_sectors {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  title       String     @db.VarChar(255)
  slug        String     @unique(map: "sub_sektors_slug_unique") @db.VarChar(255)
  image       String?    @db.VarChar(255)
  description String?    @db.Text
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  catalogs    catalogs[]
}

model temporary_users {
  id                       Int                              @id @default(autoincrement()) @db.UnsignedInt
  name                     String                           @db.VarChar(35)
  username                 String                           @db.VarChar(45)
  email                    String                           @db.VarChar(100)
  password                 String                           @db.VarChar(255)
  gender                   temporary_users_gender
  phone_number             String?                          @db.VarChar(20)
  verificationToken        String                           @db.VarChar(255)
  createdAt                DateTime                         @default(now()) @db.DateTime(0)
  resetPasswordToken       String?                          @db.VarChar(255)
  resetPasswordTokenExpiry DateTime?                        @db.DateTime(0)
  verificationTokenExpiry  DateTime?                        @db.DateTime(0)
  business_name            String?                          @db.VarChar(100)
  business_status          temporary_users_business_status?
  level_id                 BigInt                           @db.UnsignedBigInt
  business_category_id     Int?                             @db.UnsignedInt
  business_categories      business_categories?             @relation(fields: [business_category_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "temporary_users_business_category_id_foreign")
  levels                   levels                           @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "temporary_users_level_id_foreign")

  @@index([business_category_id], map: "temporary_users_business_category_id_foreign")
  @@index([level_id], map: "temporary_users_level_id_foreign")
}

model catalog_product {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  catalog_id  BigInt    @db.UnsignedBigInt
  product_id  BigInt    @db.UnsignedBigInt
  sort_order  Int       @default(0)
  is_featured Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  catalogs    catalogs  @relation(fields: [catalog_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "catalog_product_catalog_id_foreign")

  @@index([catalog_id], map: "catalog_product_catalog_id_foreign")
}

enum temporary_users_gender {
  Laki_laki @map("Laki-laki")
  Perempuan
}

enum users_gender {
  Laki_laki @map("Laki-laki")
  Perempuan
}

enum products_status {
  disetujui
  pending
  ditolak
  tidak_aktif @map("tidak aktif")
}

enum temporary_users_business_status {
  BARU
  SUDAH_LAMA
}

enum users_business_status {
  BARU
  SUDAH_LAMA
}

enum products_status_produk {
  disetujui
  pending
  ditolak
  tidak_aktif
}
